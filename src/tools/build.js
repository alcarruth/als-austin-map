// Generated by CoffeeScript 2.4.1
(function() {
  //!node_modules/.bin/coffee
  /*
   * source: build
   */
  /*
   *  ISC License (ISC)
   *  Copyright (c) 2016, Al Carruth <al.carruth@gmail.com>
   * 
   *  Permission to use, copy, modify, and/or distribute this software for
   *  any purpose with or without fee is hereby granted, provided that the
   *  above copyright notice and this permission notice appear in all
   *  copies.
   *
   *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
   *  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
   *  AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
   *  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
   *  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
   *  NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   *  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   */
  var Neighborhood_Map_App, app, bn, fs;

  fs = require('fs-extra');

  // build-nodes is my own 'task runner'
  // see src/tools/build-nodes

  bn = require('build-nodes');

  Neighborhood_Map_App = class Neighborhood_Map_App {
    constructor() {
      this.clean = this.clean.bind(this);
      this.serve = this.serve.bind(this);
      this.make = this.make.bind(this);
      this.style = new bn.StyleSheet('style', 'css');
      this.menu_icon = new bn.SVG('hamburger_icon', 'images');
      this.search_icon = new bn.SVG('search_icon', 'images');
      this.knockout = new bn.JavaScript('knockout-3.3.0', 'js');
      this.coffee_script = new bn.JavaScript('coffee-script', 'js');
      this.jsonp = new bn.CoffeeScript('jsonp', 'js');
      this.google_maps_api = new bn.CoffeeScript('google_maps_api', 'js');
      this.wikipedia_api = new bn.CoffeeScript('wikipedia_api', 'js');
      this.austin_places = new bn.CoffeeScript('austin_places', 'js');
      this.neighborhood_map = new bn.CoffeeScript('neighborhood_map', 'js');
      this.index_template = new bn.HTML_Template('index', 'templates');
      this.index_js = new bn.HTML_Page('index', this.index_template, {
        styles: [this.style.css.ref()],
        client_libs: [this.knockout.js.ref()],
        client_scripts: [this.jsonp.js.ref(), this.wikipedia_api.js.ref(), this.google_maps_api.js.ref(), this.austin_places.js.ref(), this.neighborhood_map.js.ref()],
        menu_icon: [this.menu_icon.svg.inline()],
        search_icon: [this.search_icon.svg.inline()]
      });
      this.index_inline = new bn.HTML_Page('index_inline', this.index_template, {
        styles: [this.style.css.ref()],
        client_libs: [this.knockout.js.ref()],
        client_scripts: [this.jsonp.js.inline(), this.wikipedia_api.js.inline(), this.google_maps_api.js.inline(), this.austin_places.js.inline(), this.neighborhood_map.js.inline()],
        menu_icon: [this.menu_icon.svg.inline()],
        search_icon: [this.search_icon.svg.inline()]
      });
      this.index_min = new bn.HTML_Minified_Page('index_min', this.index_template, {
        styles: [this.style.css_min.inline()],
        client_libs: [this.knockout.js.ref()],
        client_scripts: [this.jsonp.js_min.inline(), this.wikipedia_api.js_min.inline(), this.google_maps_api.js.inline(), this.austin_places.js_min.inline(), this.neighborhood_map.js_min.inline()],
        menu_icon: [this.menu_icon.svg.inline()],
        search_icon: [this.search_icon.svg.inline()]
      });
      this.index_coffee = new bn.HTML_Page('index_coffee', this.index_template, {
        styles: [this.style.css.ref()],
        client_libs: [this.knockout.js.ref(), this.coffee_script.js.ref()],
        client_scripts: [this.jsonp.coffee.ref(), this.wikipedia_api.coffee.ref(), this.google_maps_api.js.ref(), this.austin_places.coffee.ref(), this.neighborhood_map.coffee.ref()],
        menu_icon: [this.menu_icon.svg.inline()],
        search_icon: [this.search_icon.svg.inline()]
      });
    }

    clean(dest = 'dist') {
      fs.removeSync(dest);
      fs.mkdirsSync(dest + '/js');
      fs.mkdirsSync(dest + '/css');
      return fs.mkdirsSync(dest + '/images');
    }

    serve(dir = 'dist', port = '8080') {
      var connect, serveStatic;
      connect = require('connect');
      serveStatic = require('serve-static');
      return connect().use(serveStatic(dir)).listen(port, function() {
        return console.log('Server running on ' + String(8080) + '...');
      });
    }

    make(dest = 'dist') {
      var i, len, start, task, tasks;
      fs.copySync('src/images/favicon.ico', dest + '/images/favicon.ico');
      tasks = [this.jsonp, this.wikipedia_api, this.google_maps_api, this.austin_places, this.neighborhood_map, this.knockout, this.coffee_script, this.style, this.menu_icon, this.search_icon, this.index_coffee, this.index_js, this.index_inline, this.index_min];
      start = Date.now();
      for (i = 0, len = tasks.length; i < len; i++) {
        task = tasks[i];
        task.make('dist');
      }
      return console.log('\nBuild done in ' + String(Date.now() - start) + ' milliseconds.');
    }

  };

  app = new Neighborhood_Map_App();

  module.exports = {
    app: app
  };

  if (!module.parent) {
    app.clean();
    app.make();
  }

}).call(this);
