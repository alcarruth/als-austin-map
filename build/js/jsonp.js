// Generated by CoffeeScript 2.5.1
(function() {
  /**
   * source: jsonp.coffee
   */
  /*
   *  ISC License (ISC)
   *  Copyright (c) 2016, Al Carruth <al.carruth@gmail.com>
   * 
   *  Permission to use, copy, modify, and/or distribute this software for
   *  any purpose with or without fee is hereby granted, provided that the
   *  above copyright notice and this permission notice appear in all
   *  copies.
   *
   *  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL
   *  WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED
   *  WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE
   *  AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR
   *  CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS
   *  OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT,
   *  NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN
   *  CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   */
  var JSONP_Controller, JSONP_Request, ___dummy___;

  ___dummy___ = 'ignore this !-)';

  /* Class JSONP_Controller */
  /**
   * A JSONP_Controller instance can be used to make a jsonp request to an api server.
   * @constructor
   * @param {string} base_URL - the base url for the server
   * @param {string} cb_Prefix - used in naming the jsonp callback function
   */
  JSONP_Controller = class JSONP_Controller {
    /* constructor */
    constructor(base_URL, cb_Prefix) {
      /**
       * method make_Request()
       * returns a JSONP_Request object
       * @param {object} obj - query, success, error, msec
       */
      this.make_Request = this.make_Request.bind(this);
      this.base_URL = base_URL;
      this.cb_Prefix = cb_Prefix;
      this.cb_Prefix = this.cb_Prefix || 'jsonp_Callback_';
      /* seq_ID is appended to the cb_Prefix */
      this.seq_ID = 0;
      /* collect the requests for later inspection (maybe?) */
      this.requests = [];
    }

    make_Request(obj) {
      /* the call back function name, unique to this call */
      /* construct the url from the base_URL and the query object */
      var cb_Name, key, keys, request, url;
      cb_Name = this.cb_Prefix + this.seq_ID++;
      /* ADD 'CALLBACK' TO provided query object */
      obj.query.callback = cb_Name;
      url = this.base_URL;
      keys = Object.keys(obj.query);
      url += ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = keys.length; i < len; i++) {
          key = keys[i];
          results.push(key + '=' + obj.query[key]);
        }
        return results;
      })()).join('&');
      url = encodeURI(url);
      request = new JSONP_Request(obj.success, obj.error, obj.msec, cb_Name, url);
      this.requests.push(request);
      return request;
    }

  };

  /* Class JSONP_Request */
  /**
   * A JSONP_Request object is used to make a jsonp request to an api server.
   * @constructor
   * @param {function} success - executed upon successful jsonp response
   * @param {function} error - executed upon timeout
   * @param {int} msec - timeout delay in milliseconds
   * @param {string} cb_Name 
   * @param {string} url - the url for jsonp call
   */
  JSONP_Request = class JSONP_Request {
    /* constructor */
    constructor(success, error, msec, cb_Name1, url1) {
      /* method callback() */
      this.callback = this.callback.bind(this);
      /* method send() */
      this.send = this.send.bind(this);
      this.success = success;
      this.error = error;
      this.msec = msec;
      this.cb_Name = cb_Name1;
      this.url = url1;
      /* the parent node to be */
      this.head = document.getElementsByTagName('head')[0];
      /* the script element that enables this request */
      this.elt = document.createElement('script');
      this.elt.type = 'text/javascript';
      this.elt.async = true;
      this.elt.src = this.url;
      /* the below might be useful later, idk */
      this.elt.id = this.cb_Name;
      this.elt.className = 'jsonp-request';
      this.elt.request = this;
    }

    callback(data) {
      window.clearTimeout(this.timeout);
      return this.success(data);
    }

    send() {
      window[this.cb_Name] = this.callback;
      this.timeout = window.setTimeout(this.error, this.msec);
      /* appending @elt triggers the call to fetch the jsonp script */
      return this.head.appendChild(this.elt);
    }

  };

  if (typeof window !== "undefined" && window !== null) {
    window.JSONP_Controller = JSONP_Controller;
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianNvbnAuanMiLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbInNyYy9jb2ZmZWUvanNvbnAuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFRztFQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxNQUFBLGdCQUFBLEVBQUEsYUFBQSxFQUFBOztFQXFCSCxXQUFBLEdBQWMsa0JBckJYOzs7Ozs7Ozs7RUE4QkcsbUJBQU4sTUFBQSxpQkFBQSxDQUFBOztJQUdJLFdBQWEsU0FBQSxXQUFBLENBQUEsRUFBQTs7Ozs7O1VBWWIsQ0FBQSxtQkFBQSxDQUFBO01BWmMsSUFBQyxDQUFBO01BQVUsSUFBQyxDQUFBO01BQ3RCLElBQUMsQ0FBQSxTQUFELEdBQWEsSUFBQyxDQUFBLFNBQUQsSUFBYyxrQkFBbkM7O01BRVEsSUFBQyxDQUFBLE1BQUQsR0FBVSxFQUZsQjs7TUFJUSxJQUFDLENBQUEsUUFBRCxHQUFZO0lBTEg7O0lBWWIsWUFBYyxDQUFDLEdBQUQsQ0FBQSxFQUFBOzs7QUFFbEIsVUFBQSxPQUFBLEVBQUEsR0FBQSxFQUFBLElBQUEsRUFBQSxPQUFBLEVBQUE7TUFDUSxPQUFBLEdBQVUsSUFBQyxDQUFBLFNBQUQsR0FBYSxJQUFDLENBQUEsTUFBRCxHQUQvQjs7TUFJUSxHQUFHLENBQUMsS0FBSyxDQUFDLFFBQVYsR0FBcUI7TUFHckIsR0FBQSxHQUFNLElBQUMsQ0FBQTtNQUNQLElBQUEsR0FBTyxNQUFNLENBQUMsSUFBUCxDQUFZLEdBQUcsQ0FBQyxLQUFoQjtNQUNQLEdBQUEsSUFBTzs7QUFBQztRQUFBLEtBQUEsc0NBQUE7O3VCQUFBLEdBQUEsR0FBSSxHQUFKLEdBQVEsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFEO1FBQWpCLENBQUE7O1VBQUQsQ0FBd0MsQ0FBQyxJQUF6QyxDQUE4QyxHQUE5QztNQUNQLEdBQUEsR0FBTSxTQUFBLENBQVUsR0FBVjtNQUVOLE9BQUEsR0FBVSxJQUFJLGFBQUosQ0FBa0IsR0FBRyxDQUFDLE9BQXRCLEVBQStCLEdBQUcsQ0FBQyxLQUFuQyxFQUEwQyxHQUFHLENBQUMsSUFBOUMsRUFBb0QsT0FBcEQsRUFBNkQsR0FBN0Q7TUFDVixJQUFDLENBQUEsUUFBUSxDQUFDLElBQVYsQ0FBZSxPQUFmO0FBQ0EsYUFBTztJQWhCRzs7RUFmbEIsRUE5Qkc7Ozs7Ozs7Ozs7OztFQTBFRyxnQkFBTixNQUFBLGNBQUEsQ0FBQTs7SUFHSSxXQUFhLFFBQUEsT0FBQSxNQUFBLFVBQUEsTUFBQSxDQUFBLEVBQUE7O1VBaUJiLENBQUEsZUFBQSxDQUFBLG9CQWZKOztVQW9CSSxDQUFBLFdBQUEsQ0FBQTtNQXRCYyxJQUFDLENBQUE7TUFBUyxJQUFDLENBQUE7TUFBTyxJQUFDLENBQUE7TUFBTSxJQUFDLENBQUE7TUFBUyxJQUFDLENBQUEsV0FFdEQ7O01BQ1EsSUFBQyxDQUFBLElBQUQsR0FBUSxRQUFRLENBQUMsb0JBQVQsQ0FBOEIsTUFBOUIsQ0FBcUMsQ0FBQyxDQUFELEVBRHJEOztNQUlRLElBQUMsQ0FBQSxHQUFELEdBQU8sUUFBUSxDQUFDLGFBQVQsQ0FBdUIsUUFBdkI7TUFDUCxJQUFDLENBQUEsR0FBRyxDQUFDLElBQUwsR0FBWTtNQUNaLElBQUMsQ0FBQSxHQUFHLENBQUMsS0FBTCxHQUFhO01BQ2IsSUFBQyxDQUFBLEdBQUcsQ0FBQyxHQUFMLEdBQVcsSUFBQyxDQUFBLElBUHBCOztNQVVRLElBQUMsQ0FBQSxHQUFHLENBQUMsRUFBTCxHQUFVLElBQUMsQ0FBQTtNQUNYLElBQUMsQ0FBQSxHQUFHLENBQUMsU0FBTCxHQUFpQjtNQUNqQixJQUFDLENBQUEsR0FBRyxDQUFDLE9BQUwsR0FBZTtJQWROOztJQWlCYixRQUFVLENBQUMsSUFBRCxDQUFBO01BQ04sTUFBTSxDQUFDLFlBQVAsQ0FBb0IsSUFBQyxDQUFBLE9BQXJCO2FBQ0EsSUFBQyxDQUFBLE9BQUQsQ0FBUyxJQUFUO0lBRk07O0lBS1YsSUFBTSxDQUFBLENBQUE7TUFDRixNQUFNLENBQUMsSUFBQyxDQUFBLE9BQUYsQ0FBTixHQUFtQixJQUFDLENBQUE7TUFDcEIsSUFBQyxDQUFBLE9BQUQsR0FBVyxNQUFNLENBQUMsVUFBUCxDQUFrQixJQUFDLENBQUEsS0FBbkIsRUFBMEIsSUFBQyxDQUFBLElBQTNCLEVBRG5COzthQUdRLElBQUMsQ0FBQSxJQUFJLENBQUMsV0FBTixDQUFrQixJQUFDLENBQUEsR0FBbkI7SUFKRTs7RUF6QlY7O0VBZ0NBLElBQUcsZ0RBQUg7SUFDSSxNQUFNLENBQUMsZ0JBQVAsR0FBMEIsaUJBRDlCOztBQTFHRyIsInNvdXJjZXNDb250ZW50IjpbIiMjIypcbiAqIHNvdXJjZToganNvbnAuY29mZmVlXG4jIyNcblxuIyMjXG4gKiAgSVNDIExpY2Vuc2UgKElTQylcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTYsIEFsIENhcnJ1dGggPGFsLmNhcnJ1dGhAZ21haWwuY29tPlxuICogXG4gKiAgUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3JcbiAqICBhbnkgcHVycG9zZSB3aXRoIG9yIHdpdGhvdXQgZmVlIGlzIGhlcmVieSBncmFudGVkLCBwcm92aWRlZCB0aGF0IHRoZVxuICogIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2UgYXBwZWFyIGluIGFsbFxuICogIGNvcGllcy5cbiAqXG4gKiAgVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMXG4gKiAgV0FSUkFOVElFUyBXSVRIIFJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRFxuICogIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZIEFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqICBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULCBJTkRJUkVDVCwgT1JcbiAqICBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTSBMT1NTXG4gKiAgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULFxuICogIE5FR0xJR0VOQ0UgT1IgT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTlxuICogIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SIFBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXG4jIyNcblxuX19fZHVtbXlfX18gPSAnaWdub3JlIHRoaXMgIS0pJ1xuXG4jIyMgQ2xhc3MgSlNPTlBfQ29udHJvbGxlciAjIyNcbiMjIypcbiAqIEEgSlNPTlBfQ29udHJvbGxlciBpbnN0YW5jZSBjYW4gYmUgdXNlZCB0byBtYWtlIGEganNvbnAgcmVxdWVzdCB0byBhbiBhcGkgc2VydmVyLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZV9VUkwgLSB0aGUgYmFzZSB1cmwgZm9yIHRoZSBzZXJ2ZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjYl9QcmVmaXggLSB1c2VkIGluIG5hbWluZyB0aGUganNvbnAgY2FsbGJhY2sgZnVuY3Rpb25cbiMjI1xuY2xhc3MgSlNPTlBfQ29udHJvbGxlclxuXG4gICAgIyMjIGNvbnN0cnVjdG9yICMjI1xuICAgIGNvbnN0cnVjdG9yOiAoQGJhc2VfVVJMLCBAY2JfUHJlZml4KSAtPlxuICAgICAgICBAY2JfUHJlZml4ID0gQGNiX1ByZWZpeCB8fCAnanNvbnBfQ2FsbGJhY2tfJ1xuICAgICAgICAjIyMgc2VxX0lEIGlzIGFwcGVuZGVkIHRvIHRoZSBjYl9QcmVmaXggIyMjXG4gICAgICAgIEBzZXFfSUQgPSAwXG4gICAgICAgICMjIyBjb2xsZWN0IHRoZSByZXF1ZXN0cyBmb3IgbGF0ZXIgaW5zcGVjdGlvbiAobWF5YmU/KSAjIyNcbiAgICAgICAgQHJlcXVlc3RzID0gW11cbiAgICAgICAgXG4gICAgIyMjKlxuICAgICAqIG1ldGhvZCBtYWtlX1JlcXVlc3QoKVxuICAgICAqIHJldHVybnMgYSBKU09OUF9SZXF1ZXN0IG9iamVjdFxuICAgICAqIEBwYXJhbSB7b2JqZWN0fSBvYmogLSBxdWVyeSwgc3VjY2VzcywgZXJyb3IsIG1zZWNcbiAgICAjIyNcbiAgICBtYWtlX1JlcXVlc3Q6IChvYmopID0+XG5cbiAgICAgICAgIyMjIHRoZSBjYWxsIGJhY2sgZnVuY3Rpb24gbmFtZSwgdW5pcXVlIHRvIHRoaXMgY2FsbCAjIyNcbiAgICAgICAgY2JfTmFtZSA9IEBjYl9QcmVmaXggKyBAc2VxX0lEKytcbiAgICAgICAgXG4gICAgICAgICMjIyBBREQgJ0NBTExCQUNLJyBUTyBwcm92aWRlZCBxdWVyeSBvYmplY3QgIyMjXG4gICAgICAgIG9iai5xdWVyeS5jYWxsYmFjayA9IGNiX05hbWVcblxuICAgICAgICAjIyMgY29uc3RydWN0IHRoZSB1cmwgZnJvbSB0aGUgYmFzZV9VUkwgYW5kIHRoZSBxdWVyeSBvYmplY3QgIyMjXG4gICAgICAgIHVybCA9IEBiYXNlX1VSTFxuICAgICAgICBrZXlzID0gT2JqZWN0LmtleXMob2JqLnF1ZXJ5KVxuICAgICAgICB1cmwgKz0gKGtleSsnPScrb2JqLnF1ZXJ5W2tleV0gZm9yIGtleSBpbiBrZXlzKS5qb2luKCcmJylcbiAgICAgICAgdXJsID0gZW5jb2RlVVJJKHVybClcblxuICAgICAgICByZXF1ZXN0ID0gbmV3IEpTT05QX1JlcXVlc3Qob2JqLnN1Y2Nlc3MsIG9iai5lcnJvciwgb2JqLm1zZWMsIGNiX05hbWUsIHVybClcbiAgICAgICAgQHJlcXVlc3RzLnB1c2gocmVxdWVzdClcbiAgICAgICAgcmV0dXJuIHJlcXVlc3RcblxuICAgICAgICBcbiMjIyBDbGFzcyBKU09OUF9SZXF1ZXN0ICMjI1xuIyMjKlxuICogQSBKU09OUF9SZXF1ZXN0IG9iamVjdCBpcyB1c2VkIHRvIG1ha2UgYSBqc29ucCByZXF1ZXN0IHRvIGFuIGFwaSBzZXJ2ZXIuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IHN1Y2Nlc3MgLSBleGVjdXRlZCB1cG9uIHN1Y2Nlc3NmdWwganNvbnAgcmVzcG9uc2VcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGVycm9yIC0gZXhlY3V0ZWQgdXBvbiB0aW1lb3V0XG4gKiBAcGFyYW0ge2ludH0gbXNlYyAtIHRpbWVvdXQgZGVsYXkgaW4gbWlsbGlzZWNvbmRzXG4gKiBAcGFyYW0ge3N0cmluZ30gY2JfTmFtZSBcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgLSB0aGUgdXJsIGZvciBqc29ucCBjYWxsXG4jIyNcbmNsYXNzIEpTT05QX1JlcXVlc3RcblxuICAgICMjIyBjb25zdHJ1Y3RvciAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKEBzdWNjZXNzLCBAZXJyb3IsIEBtc2VjLCBAY2JfTmFtZSwgQHVybCkgLT5cbiAgICAgICAgXG4gICAgICAgICMjIyB0aGUgcGFyZW50IG5vZGUgdG8gYmUgIyMjXG4gICAgICAgIEBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXVxuICAgICAgICBcbiAgICAgICAgIyMjIHRoZSBzY3JpcHQgZWxlbWVudCB0aGF0IGVuYWJsZXMgdGhpcyByZXF1ZXN0ICMjI1xuICAgICAgICBAZWx0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcbiAgICAgICAgQGVsdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICAgICAgQGVsdC5hc3luYyA9IHRydWVcbiAgICAgICAgQGVsdC5zcmMgPSBAdXJsXG5cbiAgICAgICAgIyMjIHRoZSBiZWxvdyBtaWdodCBiZSB1c2VmdWwgbGF0ZXIsIGlkayAjIyNcbiAgICAgICAgQGVsdC5pZCA9IEBjYl9OYW1lXG4gICAgICAgIEBlbHQuY2xhc3NOYW1lID0gJ2pzb25wLXJlcXVlc3QnXG4gICAgICAgIEBlbHQucmVxdWVzdCA9IHRoaXNcblxuICAgICMjIyBtZXRob2QgY2FsbGJhY2soKSAjIyNcbiAgICBjYWxsYmFjazogKGRhdGEpID0+XG4gICAgICAgIHdpbmRvdy5jbGVhclRpbWVvdXQoQHRpbWVvdXQpXG4gICAgICAgIEBzdWNjZXNzKGRhdGEpXG5cbiAgICAjIyMgbWV0aG9kIHNlbmQoKSAjIyNcbiAgICBzZW5kOiA9PlxuICAgICAgICB3aW5kb3dbQGNiX05hbWVdID0gQGNhbGxiYWNrXG4gICAgICAgIEB0aW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoQGVycm9yLCBAbXNlYylcbiAgICAgICAgIyMjIGFwcGVuZGluZyBAZWx0IHRyaWdnZXJzIHRoZSBjYWxsIHRvIGZldGNoIHRoZSBqc29ucCBzY3JpcHQgIyMjXG4gICAgICAgIEBoZWFkLmFwcGVuZENoaWxkKEBlbHQpXG5cblxuaWYgd2luZG93P1xuICAgIHdpbmRvdy5KU09OUF9Db250cm9sbGVyID0gSlNPTlBfQ29udHJvbGxlclxuIl19
//# sourceURL=/usr/local/server/git/clones/als-austin-map/src/coffee/jsonp.coffee